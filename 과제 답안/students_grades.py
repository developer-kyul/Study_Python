#File name.....: students_grades.py
#Module name...: 6 - Compound Data Types
#Description...: This program demonstrates how to use dictionaries to store and update students' grades.
"""

__author__ = 'Jihae Suh'
__email__ = 'jihae@seoultech.ac.kr'

"""

# 학생 정보를 삭제하거나 내용을 수정하기 위해 전체 목록은 리스트, 각 학생 정보는 딕셔너리로 처리한다.

# ----- 초기 수강생 목록 ------------------------------------------------------- #
students = [
    {'번호': '1', '학번': '2018-1000', '이름': 'Bob',
     '중간고사': 76, '결석 횟수': 2},
    {'번호': '2', '학번': '2018-1001', '이름': 'Chris',
     '중간고사': 40, '결석 횟수': 5},
    {'번호': '3', '학번': '2018-1002', '이름': 'Diana',
     '중간고사': 95, '결석 횟수': 1},
    {'번호': '4', '학번': '2018-1003', '이름': 'Irene',
     '중간고사': 77, '결석 횟수': 0}
]

# 수정 전 학생 성적 정보를 출력한다.
print('=' * 5 ,'수정 전 학생 성적 정보', '=' * 15)
print(students, end='\n\n')  # 출력 후 한줄 더 줄 바꾸기를 한다.

# ----- 중간고사 이후 변화 처리 -------------------------------------------------- #
del students[1]              # Chris 삭제 이후 Diana, Irene의 인덱스 변경에 유의한다.

students[1]['중간고사'] = 90   # Diana의 중간고사 점수를 수정한다(인덱스 변경에 유의).
# 바로 위 수정 사항은 students[1]['중간고사'] -= 5 등 다른 방법을 사용해도 된다.

students[2]['결석 횟수'] = 1   # Irene 결석 횟수를 수정한다(인덱스 변경의 유의).
# 바로 위 수정 사항은 students[2]['결석 횟수'] += 1 등 다른 방법을 사용해도 된다.

students[0]['기말고사'] = 85   # Bob의 기말고사 결과를 추가한다,
students[1]['기말고사'] = 100  # Diana 기말고사 결과를 추가한다.
students[2]['기말고사'] = 30   # Irene 기말고사 결과를 추가한다.

# 수정 후 학생 성적 정보를 출력한다.
print('=' * 5, '수정 후 학생 성적 정보', '=' * 15)
print(students)

# !!!!! END OF students_grades.py !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
